"use strict";(self.webpackChunkcipher_cell_wiki=self.webpackChunkcipher_cell_wiki||[]).push([[473],{458:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"oran-tutorial/architecture/Service_Management_Orchestration","title":"Service Management Orchestration","description":"The Service Management and Orchestration (SMO) framework provides centralized management, automation, and orchestration for the entire O-RAN ecosystem. It coordinates the lifecycle of network components, ensures efficient resource allocation, and enables advanced features like network slicing and automation.","source":"@site/docs/oran-tutorial/architecture/Service_Management_Orchestration.md","sourceDirName":"oran-tutorial/architecture","slug":"/oran-tutorial/architecture/Service_Management_Orchestration","permalink":"/CipherCellWiki/docs/oran-tutorial/architecture/Service_Management_Orchestration","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/oran-tutorial/architecture/Service_Management_Orchestration.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_label":"Service Management Orchestration","title":"Service Management Orchestration","sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Near Realtime RIC","permalink":"/CipherCellWiki/docs/oran-tutorial/architecture/Near_Realtime_RIC"},"next":{"title":"Overview of Interfaces","permalink":"/CipherCellWiki/docs/oran-tutorial/architecture/Overview_Interfaces"}}');var r=t(4848),s=t(8453);const o={sidebar_label:"Service Management Orchestration",title:"Service Management Orchestration",sidebar_position:7},a=void 0,l={},c=[{value:"Key Responsibilities",id:"key-responsibilities",level:4},{value:"Connectivity",id:"connectivity",level:4},{value:"<strong>Deployment Context</strong>",id:"deployment-context",level:4},{value:"Internal structure",id:"internal-structure",level:3},{value:"rApps and the R1 Interface",id:"rapps-and-the-r1-interface",level:4},{value:"Implementation Variability",id:"implementation-variability",level:4},{value:"Other SMO Framework Functions",id:"other-smo-framework-functions",level:4}];function d(e){const n={blockquote:"blockquote",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"Service Management and Orchestration (SMO)"})," framework provides ",(0,r.jsx)(n.strong,{children:"centralized management, automation, and orchestration"})," for the entire O-RAN ecosystem. It coordinates the lifecycle of network components, ensures efficient resource allocation, and enables advanced features like network slicing and automation.\nIt interacts closely with the Near-RT RIC; while the SMO operates on a timescale of seconds, the Near-RT RIC functions in the millisecond domain."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"image_overview",src:t(2007).A+"",width:"1920",height:"1037"})}),"\n",(0,r.jsx)(n.h4,{id:"key-responsibilities",children:"Key Responsibilities"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Policy Definition and Enforcement:"})," Collaborates with RICs via the A1 interface to create, update, and enforce intent-based policies that guide xApp behavior in the Near-RT RIC\u2014for example, optimizing carrier or band selection for specific UEs or UE groups to enhance performance and balance network load."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Statistical Analysis:"})," Provides the Near-RT RIC with enriched analytics from UE measurements\u2014such as RSRP, RSRQ, and CQI for both serving and neighboring cells\u2014enabling more precise optimization and decision-making."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Lifecycle Management:"})," Automates deployment, configuration, scaling, and updates of O-RAN components (O-RU, O-DU, O-CU, and RICs), supporting both cloud-native and edge deployments."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Network Slicing:"})," Creates and manages multiple virtual RAN slices to meet specific service requirements\u2014including latency, throughput, and reliability\u2014for different applications or user groups."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fault, Performance, and Configuration Management:"})," Monitors the health of network elements, collects KPIs and performance metrics, detects anomalies or faults, and applies corrective actions or triggers automated workflows to maintain network stability."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"connectivity",children:"Connectivity"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"O1 Interface:"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Connects the SMO to individual RAN components (O-CU, O-DU, O-RU) for ",(0,r.jsx)(n.strong,{children:"element-level monitoring, performance metrics collection (KPIs), configuration management, and fault detection"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"A1 Interface:"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Connects the SMO to the ",(0,r.jsx)(n.strong,{children:"Non-RT RIC"})," for ",(0,r.jsx)(n.strong,{children:"policy definition, distribution, and analytics"}),", allowing intent-based control of xApps in the Near-RT RIC. Supports network optimization decisions based on enriched data from SMO and RAN elements."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"O2 Interface:"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Provides the SMO with the capability to ",(0,r.jsx)(n.strong,{children:"orchestrate and manage the full lifecycle of virtualized or cloud-native RAN components"}),", including ",(0,r.jsx)(n.strong,{children:"deployment, scaling, updates, and termination"}),". Works at a higher abstraction level than O1, integrating with cloud platforms or orchestration frameworks to automate RAN operations end-to-end."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"deployment-context",children:(0,r.jsx)(n.strong,{children:"Deployment Context"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Typically deployed in ",(0,r.jsx)(n.strong,{children:"centralized cloud or data center environments"})," for scalable orchestration across multiple sites."]}),"\n",(0,r.jsxs)(n.li,{children:["Supports ",(0,r.jsx)(n.strong,{children:"multi-vendor interoperability"}),", enabling operators to manage a heterogeneous network seamlessly."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"internal-structure",children:"Internal structure"}),"\n",(0,r.jsx)(n.p,{children:"Next, we present the internal structure of the SMO framework, detailing its integration with the Non-RT RIC. The architecture is illustrated in the figure below."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"image_overview",src:t(6227).A+"",width:"1706",height:"955"})}),"\n",(0,r.jsx)(n.h4,{id:"rapps-and-the-r1-interface",children:"rApps and the R1 Interface"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Similar in concept to ",(0,r.jsx)(n.strong,{children:"xApps"})," deployed on the ",(0,r.jsx)(n.strong,{children:"Near-RT RIC"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Specific ",(0,r.jsx)(n.strong,{children:"rApps"})," (RAN applications) can be deployed within the ",(0,r.jsx)(n.strong,{children:"Non-RT RIC"}),", which is part of the SMO."]}),"\n",(0,r.jsxs)(n.li,{children:["rApps interact with the Non-RT RIC framework services using the ",(0,r.jsx)(n.strong,{children:"R1 interface"})," (open APIs)."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"implementation-variability",children:"Implementation Variability"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Certain components are ",(0,r.jsx)(n.strong,{children:"implementation-dependent"})," and can be placed either:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Internal to the Non-RT RIC"})," (tightly integrated), or"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"External but accessible via exposure functions"})," (loosely coupled)."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Examples include:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"AI/ML workflow functions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Model training and retraining"}),"\n",(0,r.jsx)(n.li,{children:"Inference pipelines"}),"\n",(0,r.jsx)(n.li,{children:"Model lifecycle management  s"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"other-smo-framework-functions",children:"Other SMO Framework Functions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Functions that are ",(0,r.jsx)(n.strong,{children:"external to the Non-RT RIC"}),", but still part of the SMO."]}),"\n",(0,r.jsxs)(n.li,{children:["Marked in the architecture as ",(0,r.jsx)(n.strong,{children:"Other SMO Framework Functions"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Examples include:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Network slicing lifecycle management"})," (design, instantiation, scaling, termination)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"End-to-end service orchestration"})," (across RAN, transport, and core)"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Resource inventory and assurance"})}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},2007:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/smo-e63700b0decd3dcfb7a3d4e82ad6e705.svg"},6227:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/smo_architecture-731aa695693a910ee7b9b890fd7d5c20.svg"},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);